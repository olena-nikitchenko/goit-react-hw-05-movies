{"version":3,"file":"static/js/539.a3887de9.chunk.js","mappings":"mTAQO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,qBADlB,cACCC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBL,EAAAA,EAAAA,IAAU,gBAAiB,CAChDM,OAAQ,CAAED,MAAOA,KAFd,cACCJ,EADD,yBAKEA,EAASC,KAAKC,SALhB,kEAQA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACkBR,EAAAA,EAAAA,IAAA,iBAAoBQ,IADtC,cACCP,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,uFACkBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADlB,cACCP,EADD,yBAEEA,EAASC,KAAKQ,MAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCH,GAAjC,uFACkBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADlB,cACCP,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEA5BPH,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CAAC,EACzBA,EAAAA,EAAAA,SAAAA,OAAAA,QAJgB,mCAKhBA,EAAAA,EAAAA,SAAAA,OAAAA,SAAoC,O,yPCJvBY,EAAcC,EAAAA,GAAAA,GAAH,sBAEXC,EAAcD,EAAAA,GAAAA,GAAH,+EAMXE,EAAWF,EAAAA,GAAAA,IAAH,mHASRG,EAAYH,EAAAA,GAAAA,GAAH,gDAITI,EAAiBJ,EAAAA,GAAAA,EAAH,gD,SCTZ,SAASK,IACtB,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,OACR,GAA4BE,EAAAA,EAAAA,UAAS,QAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,UAAS,MAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiCA,OA/BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,2FACEL,EAAU,WADZ,mBAI4Bd,EAAAA,EAAAA,IAAeU,EAAQ,CAC7CU,OAAQF,EAAWE,SALzB,UAQ6B,KAJnBL,EAJV,QAQkBM,OARlB,uBASMC,EAAAA,GAAAA,MAAY,aACZR,EAAU,YAVhB,0BAaIE,EAAaD,GACbD,EAAU,YAdd,kDAgBIQ,EAAAA,GAAAA,MAAY,kDACZR,EAAU,YAjBd,2DAHc,sBA0Bd,OA1Bc,mCAwBdS,GAEO,WACLL,EAAWM,OACZ,CACF,GAAE,CAACd,KAGF,gCACc,YAAXG,IAAwB,SAACY,EAAA,EAAD,IAExBV,IACC,SAACZ,EAAD,UACGY,EAAUW,KAAI,gBAAG3B,EAAH,EAAGA,GAAI4B,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACb,UAACxB,EAAD,YACE,SAACC,EAAD,CACEwB,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,KAEP,SAAC,EAAD,UAAYA,KACZ,SAAC,EAAD,UAAiBE,MAVD9B,EADL,QAkBxB,C","sources":["api/api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '53263a417bdf2aa4ac46d1a4836d7bf0';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {};\naxios.defaults.params['api_key'] = API_KEY;\naxios.defaults.params['language'] = 'en-US';\n\nexport async function fetchMoviesTrend() {\n  const response = await axios.get(`/trending/all/day`);\n  return response.data.results;\n}\n\nexport async function fetchSearchMovies(query) {\n  const response = await axios.get('/search/movie', {\n    params: { query: query },\n  });\n\n  return response.data.results;\n}\n\nexport async function fetchDetailsMovie(id) {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n}\n\nexport async function fetchCastMovie(id) {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data.cast;\n}\n\nexport async function fetchReviewsMovie(id) {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data.results;\n}\n","import styled from 'styled-components';\n\nexport const CastContent = styled.ul``;\n\nexport const CardWrapper = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const CastPost = styled.img`\n  width: 160px;\n  height: auto;\n\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const АctorName = styled.h2`\n  margin-bottom: 16px;\n`;\n\nexport const АctorCharacter = styled.p`\n  margin-bottom: 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchCastMovie } from '../../api/api.js';\nimport defaultImage from '../../images/defaultImage.jpg';\nimport {\n  CastContent,\n  CastPost,\n  АctorName,\n  CardWrapper,\n  АctorCharacter,\n} from '../Cast/Cast.styled.js';\n\nexport default function Cast() {\n  const { itemId } = useParams();\n  const [status, setStatus] = useState('idle');\n  const [castMovie, setcastMovie] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchCastMovieCard() {\n      setStatus('pending');\n\n      try {\n        const castMovie = await fetchCastMovie(itemId, {\n          signal: controller.signal,\n        });\n\n        if (castMovie.length === 0) {\n          toast.error('Not found');\n          setStatus('rejected');\n          return;\n        }\n        setcastMovie(castMovie);\n        setStatus('resolved');\n      } catch (error) {\n        toast.error('Something went wrong. Please, reload the page.');\n        setStatus('rejected');\n      }\n    }\n\n    fetchCastMovieCard();\n\n    return () => {\n      controller.abort();\n    };\n  }, [itemId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n\n      {castMovie && (\n        <CastContent>\n          {castMovie.map(({ id, name, profile_path, character }) => (\n            <CardWrapper key={id}>\n              <CastPost\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : defaultImage\n                }\n                alt={name}\n              />\n              <АctorName>{name}</АctorName>\n              <АctorCharacter>{character}</АctorCharacter>\n            </CardWrapper>\n          ))}\n        </CastContent>\n      )}\n    </>\n  );\n}\n"],"names":["fetchMoviesTrend","axios","response","data","results","fetchSearchMovies","query","params","fetchDetailsMovie","id","fetchCastMovie","cast","fetchReviewsMovie","CastContent","styled","CardWrapper","CastPost","АctorName","АctorCharacter","Cast","itemId","useParams","useState","status","setStatus","castMovie","setcastMovie","useEffect","controller","AbortController","signal","length","toast","fetchCastMovieCard","abort","Loader","map","name","profile_path","character","src","defaultImage","alt"],"sourceRoot":""}